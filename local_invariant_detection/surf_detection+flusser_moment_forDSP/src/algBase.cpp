// Copyright [2015] <Phil Hu>

#include "../inc/algBase.h"

/*// Multiplied by 1000
#pragma DATA_ALIGN (sinValue, 32);
int16 sinValue[360] =
{
  0,    17,   34,   52,   70,   87,  104,  122,  139,   156,
  174,   191,  208,  225,  242,  259,  276,  292,  309,   326,   
  342,   358,  375,  391,  407,  423,  438,  454,  469,   485, 
  500,   515,  530,  545,  559,  574,  588,  602,  616,   629,  
  643,   656,  669,  682,  695,  707,  719,  731,  743,   755,
  766,   777,  788,  799,  809,  819,  829,  839,  848,   857,   
  866,   875,  883,  891,  899,  906,  914,  921,  927,   934,  
  940,   946,  951,  956,  961,  966,  970,  974,  978,   982,   
  985,   988,  990,  993,  995,  996,  998,  999,  999,  1000,  
 1000,  1000,  999,  999,  998,  996,  995,  993,  990,   988, 
  985,   982,  978,  974,  970,  966,  961,  956,  951,   946,  
  940,   934,  927,  921,  914,  906,  899,  891,  883,   875,   
  866,   857,  848,  839,  829,  819,  809,  799,  788,   777,   
  766,   755,  743,  731,  719,  707,  695,  682,  669,   656,   
  643,   629,  616,  602,  588,  574,  559,  545,  530,   515,   
  500,   485,  469,  454,  438,  423,  407,  391,  375,   358,   
  342,   326,  309,  292,  276,  259,  242,  225,  208,   191,   
  174,   156,  139,  122,  104,   87,   70,   52,   34,    17,     
  0,   -17,  -34,  -52,  -70,  -87, -104, -122, -139,  -156,  
 -174,  -191, -208, -225, -242, -259, -276, -292, -309,  -326,  
 -342,  -358, -375, -391, -407, -423, -438, -454, -469,  -485,  
 -500,  -515, -530, -545, -559, -574, -588, -602, -616,  -629,  
 -643,  -656, -669, -682, -695, -707, -719, -731, -743,  -755,  
 -766,  -777, -788, -799, -809, -819, -829, -839, -848,  -857,  
 -866,  -875, -883, -891, -899, -906, -914, -921, -927,  -934,  
 -940,  -946, -951, -956, -961, -966, -970, -974, -978,  -982,  
 -985,  -988, -990, -993, -995, -996, -998, -999, -999, -1000, 
-1000, -1000, -999, -999, -998, -996, -995, -993, -990,  -988,  
 -985,  -982, -978, -974, -970, -966, -961, -956, -951,  -946,  
 -940,  -934, -927, -921, -914, -906, -899, -891, -883,  -875,  
 -866,  -857, -848, -839, -829, -819, -809, -799, -788,  -777,  
 -766,  -755, -743, -731, -719, -707, -695, -682, -669,  -656,  
 -643,  -629, -616, -602, -588, -574, -559, -545, -530,  -515,  
 -500,  -485, -469, -454, -438, -423, -407, -391, -375,  -358,  
 -342,  -326, -309, -292, -276, -259, -242, -225, -208,  -191,  
 -174,  -156, -139, -122, -104,  -87,  -70,  -52,  -34,   -17,
};


#pragma DATA_ALIGN (cosValue, 32);
int16 cosValue[360] =
{
 1000,  1000,  999,  999,  998,  996,  995,  993,  990,   988, 
  985,   982,  978,  974,  970,  966,  961,  956,  951,   946,  
  940,   934,  927,  921,  914,  906,  899,  891,  883,   875,   
  866,   857,  848,  839,  829,  819,  809,  799,  788,   777,   
  766,   755,  743,  731,  719,  707,  695,  682,  669,   656,   
  643,   629,  616,  602,  588,  574,  559,  545,  530,   515,   
  500,   485,  469,  454,  438,  423,  407,  391,  375,   358,   
  342,   326,  309,  292,  276,  259,  242,  225,  208,   191,   
  174,   156,  139,  122,  104,   87,   70,   52,   34,    17, 
   0,  -17,  -34,  -52,  -70,  -87, -104, -122, -139,  -156,  
 -174,  -191, -208, -225, -242, -259, -276, -292, -309,  -326,  
 -342,  -358, -375, -391, -407, -423, -438, -454, -469,  -485,  
 -500,  -515, -530, -545, -559, -574, -588, -602, -616,  -629,  
 -643,  -656, -669, -682, -695, -707, -719, -731, -743,  -755,  
 -766,  -777, -788, -799, -809, -819, -829, -839, -848,  -857,  
 -866,  -875, -883, -891, -899, -906, -914, -921, -927,  -934,  
 -940,  -946, -951, -956, -961, -966, -970, -974, -978,  -982,  
 -985,  -988, -990, -993, -995, -996, -998, -999, -999, -1000,
-1000, -1000, -999, -999, -998, -996, -995, -993, -990,  -988,  
 -985,  -982, -978, -974, -970, -966, -961, -956, -951,  -946,  
 -940,  -934, -927, -921, -914, -906, -899, -891, -883,  -875,  
 -866,  -857, -848, -839, -829, -819, -809, -799, -788,  -777,  
 -766,  -755, -743, -731, -719, -707, -695, -682, -669,  -656,  
 -643,  -629, -616, -602, -588, -574, -559, -545, -530,  -515,  
 -500,  -485, -469, -454, -438, -423, -407, -391, -375,  -358,  
 -342,  -326, -309, -292, -276, -259, -242, -225, -208,  -191,  
 -174,  -156, -139, -122, -104,  -87,  -70,  -52,  -34,   -17,
  0,    17,   34,   52,   70,   87,  104,  122,  139,   156,
  174,   191,  208,  225,  242,  259,  276,  292,  309,   326,   
  342,   358,  375,  391,  407,  423,  438,  454,  469,   485,
  500,   515,  530,  545,  559,  574,  588,  602,  616,   629,  
  643,   656,  669,  682,  695,  707,  719,  731,  743,   755,
  766,   777,  788,  799,  809,  819,  829,  839,  848,   857,   
  866,   875,  883,  891,  899,  906,  914,  921,  927,   934,  
  940,   946,  951,  956,  961,  966,  970,  974,  978,   982,   
  985,   988,  990,  993,  995,  996,  998,  999,  999,  1000,  
};*/

// Multiplied by 1024
// #pragma DATA_ALIGN (sinValue, 32);
int16 sinValue[360] = {
// 0 - 89
    0,    18,   36,   54,   71,   89,  107,  125,  143,   160,
    178,   195,  213,  230,  248,  265,  282,  299,  316,   333,
    350,   367,  383,  400,  416,  433,  449,  465,  481,   496,
    512,   527,  543,  558,  573,  587,  602,  616,  630,   644,
    658,   672,  685,  698,  711,  724,  737,  749,  761,   773,
    784,   796,  807,  818,  828,  839,  849,  859,  868,   878,
    887,   896,  904,  912,  920,  928,  935,  943,  949,   956,
    962,   968,  974,  979,  984,  989,  994,  998, 1002,  1005,
    1008,  1011, 1014, 1016, 1018, 1020, 1022, 1023, 1023,  1024,

// 90 - 179
  1024,  1024, 1023, 1023, 1022, 1020, 1018, 1016, 1014,  1011,
  1008,  1005,  1002,  998,  994,  989,  984,  979,  974,  968,
  962,   956,   949,  943,  935,  928,  920,  912,  904,  896,
  887,   878,   868,  859,  849,  839,  828,  818,  807,  796,
  784,   773,   761,  749,  737,  724,  711,  698,  685,  672,
  658,   644,   630,  616,  602,  587,  573,  558,  543,  527,
  512,   496,   481,  465,  449,  433,  416,  400,  383,  367,
  350,   333,   316,  299,  282,  265,  248,  230,  213,  195,
  178,   160,   143,  125,  107,   89,   71,   54,   36,   18,

// 180 - 269
    -0,   -18,  -36,  -54,  -71,  -89, -107, -125, -143,  -160,
    -178,  -195, -213, -230, -248, -265, -282, -299, -316,  -333,
    -350,  -367, -383, -400, -416, -433, -449, -465, -481,  -496,
    -512,  -527, -543, -558, -573, -587, -602, -616, -630,  -644,
    -658,  -672, -685, -698, -711, -724, -737, -749, -761,  -773,
    -784,  -796, -807, -818, -828, -839, -849, -859, -868,  -878,
    -887,  -896, -904, -912, -920, -928, -935, -943, -949,  -956,
    -962,  -968, -974, -979, -984, -989, -994, -998, -1002, -1005,
    -1008, -1011, -1014, -1016, -1018, -1020, -1022, -1023, -1023, -1024,

// 270 - 359
    -1024, -1024, -1023, -1023, -1022, -1020, -1018, -1016, -1014, -1011,
    -1008, -1005, -1002, -998, -994, -989, -984, -979, -974, -968,
    -962,  -956, -949, -943, -935, -928, -920, -912, -904, -896,
    -887,  -878, -868, -859, -849, -839, -828, -818, -807, -796,
    -784,  -773, -761, -749, -737, -724, -711, -698, -685, -672,
    -658,  -644, -630, -616, -602, -587, -573, -558, -543, -527,
    -512,  -496, -481, -465, -449, -433, -416, -400, -383, -367,
    -350,  -333, -316, -299, -282, -265, -248, -230, -213, -195,
    -178,  -160, -143, -125, -107,  -89,  -71,  -54,  -36,  -18,
};

// #pragma DATA_ALIGN (cosValue, 32);
int16 cosValue[360] = {
// 0 - 89
    1024,  1024,  1023, 1023, 1022, 1020, 1018, 1016, 1014, 1011,
    1008,  1005,  1002,  998,  994,  989,  984,  979,  974,  968,
    962,   956,   949,  943,  935,  928,  920,  912,  904,  896,
    887,   878,   868,  859,  849,  839,  828,  818,  807,  796,
    784,   773,   761,  749,  737,  724,  711,  698,  685,  672,
    658,   644,   630,  616,  602,  587,  573,  558,  543,  527,
    512,   496,   481,  465,  449,  433,  416,  400,  383,  367,
    350,   333,   316,  299,  282,  265,  248,  230,  213,  195,
    178,   160,   143,  125,  107,   89,   71,   54,   36,   18,

// 90 - 179
    0,   -18,   -36,  -54,  -71,  -89, -107, -125, -143,  -160,
    -178,  -195,  -213, -230, -248, -265, -282, -299, -316,  -333,
    -350,  -367,  -383, -400, -416, -433, -449, -465, -481,  -496,
    -512,  -527,  -543, -558, -573, -587, -602, -616, -630,  -644,
    -658,  -672,  -685, -698, -711, -724, -737, -749, -761,  -773,
    -784,  -796,  -807, -818, -828, -839, -849, -859, -868,  -878,
    -887,  -896,  -904, -912, -920, -928, -935, -943, -949,  -956,
    -962,  -968,  -974, -979, -984, -989, -994, -998, -1002, -1005,
    -1008, -1011, -1014, -1016, -1018, -1020, -1022, -1023, -1023, -1024,

// 180 - 269
    -1024, -1024, -1023, -1023, -1022, -1020, -1018, -1016, -1014, -1011,
    -1008, -1005, -1002, -998, -994, -989, -984, -979, -974,  -968,
    -962,  -956,  -949, -943, -935, -928, -920, -912, -904,  -896,
    -887,  -878,  -868, -859, -849, -839, -828, -818, -807,  -796,
    -784,  -773,  -761, -749, -737, -724, -711, -698, -685,  -672,
    -658,  -644,  -630, -616, -602, -587, -573, -558, -543,  -527,
    -512,  -496,  -481, -465, -449, -433, -416, -400, -383,  -367,
    -350,  -333,  -316, -299, -282, -265, -248, -230, -213,  -195,
    -178,  -160,  -143, -125, -107,  -89,  -71,  -54,  -36,   -18,

// 270 - 359
    0,    18,   36,   54,   71,   89,  107,  125,  143,   160,
    178,   195,  213,  230,  248,  265,  282,  299,  316,   333,
    350,   367,  383,  400,  416,  433,  449,  465,  481,   496,
    512,   527,  543,  558,  573,  587,  602,  616,  630,   644,
    658,   672,  685,  698,  711,  724,  737,  749,  761,   773,
    784,   796,  807,  818,  828,  839,  849,  859,  868,   878,
    887,   896,  904,  912,  920,  928,  935,  943,  949,   956,
    962,   968,  974,  979,  984,  989,  994,  998, 1002,  1005,
    1008,  1011, 1014, 1016, 1018, 1020, 1022, 1023, 1023,  1024,
};

void* malloc_check(size_t _Size) {
    void* p = malloc(_Size);

    if (p == NULL) {
        DEBUG_PRINT_DETAILED("Memory allocation failed!");
    }

    return p;
}

void* calloc_check(size_t _NumOfElements, size_t _SizeOfElement) {
    void* p = calloc(_NumOfElements, _SizeOfElement);

    if (p == NULL) {
        DEBUG_PRINT_DETAILED("Memory allocation failed!");
    }

    return p;
}
